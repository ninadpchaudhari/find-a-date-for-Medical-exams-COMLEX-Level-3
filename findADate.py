# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class availability:
  def __init__(self, state, pincode, centercode, date):
    self.state = state
    self.pincode = pincode
    self.centercode = centercode
    self.date = date

class CheckAvaliability():
  def __init__(self, searchState,searchPincode,searchCenterCode = None):
    self.searchState = searchState
    self.searchPincode= searchPincode
    if searchCenterCode != None:
      self.searchCenterCode = [searchCenterCode]
    self.driver = webdriver.Chrome()
    self.all_availability = []
    self.visitedCenters = list()
    self.doit()
    self.teardown_method()

# 01606

  def teardown_method(self):
    self.driver.quit()
  
  def doit(self):
    # Test name: 4235
    # Step # | name | target | value
    # 1 | open | /Welcome.aspx | 
    self.driver.get("https://securereg3.prometric.com/Welcome.aspx")
    # 2 | setWindowSize | 1420x741 | 
    self.driver.set_window_size(1420, 741)
    # 3 | click | id=masterPage_cphPageBody_rbnProfLisc | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_rbnProfLisc").click()
    # 4 | click | id=masterPage_cphPageBody_ddlPrograms | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlPrograms").click()
    # 5 | select | id=masterPage_cphPageBody_ddlPrograms | label=National Board of Osteopathic Medical Examiners (NBOME)
    dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlPrograms")
    dropdown.find_element(By.XPATH, "//option[. = 'National Board of Osteopathic Medical Examiners (NBOME)']").click()
    # 6 | click | id=masterPage_cphPageBody_ddlPrograms | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlPrograms").click()
    # 7 | click | id=masterPage_cphPageBody_ddlCountry | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlCountry").click()
    # 8 | select | id=masterPage_cphPageBody_ddlCountry | label=UNITED STATES
    dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlCountry")
    dropdown.find_element(By.XPATH, "//option[. = 'UNITED STATES']").click()
    # 9 | click | id=masterPage_cphPageBody_ddlCountry | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlCountry").click()
    # 10 | click | id=masterPage_cphPageBody_ddlStateProvince | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlStateProvince").click()
    # 11 | select | id=masterPage_cphPageBody_ddlStateProvince | label=New York
    dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlStateProvince")
    dropdown.find_element(By.XPATH, f"//option[. = '{self.searchState}']").click()
    # 12 | click | id=masterPage_cphPageBody_ddlStateProvince | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlStateProvince").click()
    # 13 | click | id=masterPage_cphPageBody_btnNext | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_btnNext").click()
    # 14 | waitForElementPresent | xpath=//a[contains(text(),'Search for Availability')] | 30000
    WebDriverWait(self.driver, 30000).until(expected_conditions.presence_of_element_located((By.XPATH, "//a[contains(text(),\'Search for Availability\')]")))
    # 15 | click | xpath=//a[contains(text(),'Search for Availability')] | 
    self.driver.find_element(By.XPATH, "//a[contains(text(),\'Search for Availability\')]").click()
    # 16 | waitForElementPresent | id=masterPage_cphPageBody_ddlExam | 30000
    WebDriverWait(self.driver, 30000).until(expected_conditions.presence_of_element_located((By.ID, "masterPage_cphPageBody_ddlExam")))
    # 17 | click | id=masterPage_cphPageBody_ddlExam | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlExam").click()
    # 18 | select | id=masterPage_cphPageBody_ddlExam | label=COMLEX Level 3
    dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlExam")
    dropdown.find_element(By.XPATH, "//option[. = 'COMLEX Level 3']").click()
    # 19 | click | id=masterPage_cphPageBody_ddlExam | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_ddlExam").click()
    # 20 | click | id=masterPage_cphPageBody_btnNext | 
    self.driver.find_element(By.ID, "masterPage_cphPageBody_btnNext").click()

    try:
      assert len(self.searchCenterCode) > 0
    except AttributeError:
      # 21 | waitForElementEditable | id=txtSearch | 30000
      WebDriverWait(self.driver, 30000).until(expected_conditions.element_to_be_clickable((By.ID, "txtSearch")))
      # 22 | click | id=txtSearch |
      self.driver.find_element(By.ID, "txtSearch").click()
      # 23 | type | id=txtSearch | 11213
      self.driver.find_element(By.ID, "txtSearch").send_keys(f"{self.searchPincode}")
      # 24 | click | id=btnSearch |
      self.driver.find_element(By.ID, "btnSearch").click()
      # 25 | mouseOver | id=btnSearch |
      element = self.driver.find_element(By.ID, "btnSearch")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()

      WebDriverWait(self.driver, 30000).until(expected_conditions.presence_of_element_located(
        (By.LINK_TEXT, "Availability")))

      elements = self.driver.find_elements(By.LINK_TEXT, "Availability")
      assert len(elements) > 0
      available_centers = list(map(lambda e: e.get_attribute("href"), elements))
      available_centers = list(map(lambda s: s.split("#")[1], available_centers))
      self.searchCenterCode = available_centers
      print(f"Found {list(available_centers)} in {self.searchPincode}")

    while (len(list(set(self.searchCenterCode) - set(self.visitedCenters))) > 0):

      currentSearchCenterCode = self.searchCenterCode.pop(0)

      # 21 | waitForElementEditable | id=txtSearch | 30000
      WebDriverWait(self.driver, 30000).until(expected_conditions.element_to_be_clickable((By.ID, "txtSearch")))
      # 22 | click | id=txtSearch |
      self.driver.find_element(By.ID, "txtSearch").clear()
      self.driver.find_element(By.ID, "txtSearch").click()

      # 23 | type | id=txtSearch | 11213
      self.driver.find_element(By.ID, "txtSearch").send_keys(f"{self.searchPincode}")
      # 24 | click | id=btnSearch |
      self.driver.find_element(By.ID, "btnSearch").click()
      # 25 | mouseOver | id=btnSearch |
      element = self.driver.find_element(By.ID, "btnSearch")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()

      # 26 | waitForElementPresent | xpath=//a[@onclick="IWRDisplay.submitSite('4235');"] | 30000
      WebDriverWait(self.driver, 30000).until(expected_conditions.presence_of_element_located(
        (By.XPATH, f"//a[@onclick=\"IWRDisplay.submitSite(\'{currentSearchCenterCode}\');\"]")))
      # 27 | click | xpath=//a[@onclick="IWRDisplay.submitSite('4235');"] |
      self.driver.find_element(By.XPATH,
                               f"//a[@onclick=\"IWRDisplay.submitSite(\'{currentSearchCenterCode}\');\"]").click()
      # 28 | waitForElementPresent | id=masterPage_cphPageBody_monthYearlist | 30000

      WebDriverWait(self.driver, 30000).until(
        expected_conditions.presence_of_element_located((By.ID, "masterPage_cphPageBody_monthYearlist")))
      # 29 | click | id=masterPage_cphPageBody_monthYearlist |
      self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist").click()
      # 30 | select | id=masterPage_cphPageBody_monthYearlist | label=December 2021
      dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist")


      # dropdown.find_element(By.XPATH, "//option[. = 'December 2021']").click()
      # # 31 | click | id=masterPage_cphPageBody_monthYearlist |
      # self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist").click()
      # # 32 | click | id=masterPage_cphPageBody_btnGoCal |
      # self.driver.find_element(By.ID, "masterPage_cphPageBody_btnGoCal").click()
      # # 33 | waitForElementPresent | xpath=//caption[contains(.,'December 2021')] | 30000
      # WebDriverWait(self.driver, 30000).until(
      #   expected_conditions.presence_of_element_located((By.XPATH, "//caption[contains(.,\'December 2021\')]")))
      # # 34 | assertElementPresent | xpath=//td[@class='calActive'] |
      # # Assert atleast one date is active.
      # elements = self.driver.find_elements(By.XPATH, "//td[@class=\'calActive\']")
      # assert len(elements) > 0
      # dates_avaliable = map(lambda e: e.get_attribute("id"), elements)
      # print(f"Found {list(dates_avaliable)} in December 2021")
      # # 35 | click | id=masterPage_cphPageBody_monthYearlist |
      # self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist").click()
      # # 36 | select | id=masterPage_cphPageBody_monthYearlist | label=July 2021
      # dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist")


      dropdown.find_element(By.XPATH, "//option[. = 'July 2021']").click()
      # 37 | click | id=masterPage_cphPageBody_monthYearlist |
      self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist").click()
      # 38 | click | id=masterPage_cphPageBody_btnGoCal |
      self.driver.find_element(By.ID, "masterPage_cphPageBody_btnGoCal").click()
      # 39 | waitForElementPresent | xpath=//caption[contains(.,'July 2021')] | 30000
      WebDriverWait(self.driver, 30000).until(
        expected_conditions.presence_of_element_located((By.XPATH, "//caption[contains(.,\'July 2021\')]")))
      # 40 | assertElementNotPresent | xpath=//td[@class='calActive'] |
      # FAIL test if any date is active!
      elements = self.driver.find_elements(By.XPATH, "//td[@class=\'calActive\']")
      if len(elements) > 0:
        dates_avaliable = list(map(lambda e: e.get_attribute("id"), elements))
        for d in dates_avaliable:
          self.all_availability.append(
            availability(state=self.searchState, pincode=self.searchPincode, centercode=currentSearchCenterCode,
                         date=d))
        print(f"Found {list(dates_avaliable)} in July 2021 in {currentSearchCenterCode}")
      # 41 | click | id=masterPage_cphPageBody_monthYearlist |
      self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist").click()
      # 42 | select | id=masterPage_cphPageBody_monthYearlist | label=August 2021
      dropdown = self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist")
      dropdown.find_element(By.XPATH, "//option[. = 'August 2021']").click()
      # 43 | click | id=masterPage_cphPageBody_monthYearlist |
      self.driver.find_element(By.ID, "masterPage_cphPageBody_monthYearlist").click()
      # 44 | click | id=masterPage_cphPageBody_btnGoCal |
      self.driver.find_element(By.ID, "masterPage_cphPageBody_btnGoCal").click()
      # 45 | waitForElementPresent | xpath=//caption[contains(.,'August 2021')] | 30000
      WebDriverWait(self.driver, 30000).until(
        expected_conditions.presence_of_element_located((By.XPATH, "//caption[contains(.,\'August 2021\')]")))
      # 46 | assertElementNotPresent | xpath=//td[@class='calActive'] |
      # FAIL test if any date is active!
      elements = self.driver.find_elements(By.XPATH, "//td[@class=\'calActive\']")
      if len(elements) > 0:
        dates_avaliable = list(map(lambda e: e.get_attribute("id"), elements))
        for d in dates_avaliable:
          self.all_availability.append(
            availability(state=self.searchState, pincode=self.searchPincode, centercode=currentSearchCenterCode,
                         date=d))
        print(f"Found {list(dates_avaliable)} in August 2021 in {currentSearchCenterCode}")

      self.visitedCenters.append(currentSearchCenterCode)
      # Click on back button
      self.driver.find_element(By.ID, "masterPage_cphPageBody_btnBack").click()

if __name__ == '__main__':

  #ins = CheckAvaliability(searchState="New York",searchPincode="11213",searchCenterCode="4235")
  ins = CheckAvaliability(searchState="New York", searchPincode="11213")
  print(ins.all_availability)



###
